python manage.py makemigrations <app>: Create the migrations (generate the SQL commands).

python manage.py migrate: Run the migrations (execute the SQL commands).

As Django's documentation says Migrations are Djangoâ€™s way of propagating changes you make 
to your models (adding a field, deleting a model, etc.) into your database schema.

makemigrations basically generates the SQL commands for preinstalled apps (which can be 
viewed in installed apps in settings.py) and your newly created apps' model which you add
 in installed apps.It does not execute those commands in your database file. So tables 
 doesn't created after makemigrations.

After applying makemigrations you can see those SQL commands with sqlmigrate which shows 
all the SQL commands which has been generated by makemigrations.

migrate executes those SQL commands in database file.So after executing migrate all the 
tables of your installed apps are created in your database file.
##########################################################################################
#########################################################################################
#################### django middleware ####################################################
## https://www.agiliq.com/blog/2015/07/understanding-django-middlewares/
## https://docs.djangoproject.com/en/1.8/topics/http/middleware/
Middlewares are hooks to modify Django request or response object.
You can use middleware if you want to modify the request i.e HttpRequest object which is sent to the view. Or you might 
want to modify the HttpResponse object returned from the view. Both these can be achieved by using a middleware.

You might want to perform an operation before the view executes. In such case you would use a middleware.
Django provides some default middleware. eg: AuthenticationMiddleware


